using UnityEngine;
using Enums;
using System.Collections.Generic;
public class MagnetFieldController : MonoBehaviour
{
    [SerializeField] private float baseMagenticForce = 100f;
    [SerializeField] private float maxEffectRange = 5f;
    [Tooltip("The offset angles from the center of the aim direction where the force still takes effect")]
    [SerializeField] private float aimConeAngle = 30f;
    [SerializeField] private float aimJoystickThreshold = 0.1f;

    [Tooltip("Defineso how the force decreases over the distance")]
    [SerializeField] private AnimationCurve distanceFalloff = AnimationCurve.Linear(0f,1f,5f,0f);

    [SerializeField] private Collider2D detectionCollider;
    private Rigidbody2D _rb;

    private MagnetismForceMode _magnetismForceMode;

    private List<MagnetObject> _nearbyObjects = new List<MagnetObject>();
    private Vector2 _aimDirection = Vector2.right;

    private MovementBehaviour _movementBehaviour;

    private void Awake()
    {
        if (detectionCollider == null) Debug.LogError("Detection collider not assigned on" + this.name);
        _rb = GetComponent<Rigidbody2D>();
        _movementBehaviour = GetComponent<MovementBehaviour>();
    }

    public void UpdateAimDirection(Vector2 aimInput, bool isUsingController)
    {
        //Debug.Log(aimInput + "  "  + isUsingController);

        if(isUsingController)
        {
            if(aimInput.sqrMagnitude > aimJoystickThreshold)
            {
                _aimDirection = aimInput.normalized;

                Debug.DrawLine(transform.position, transform.position + (Vector3)_aimDirection * 15f, Color.red);
            }
        } else
        {
            if(Camera.main != null)
            {

                Plane aimingPlane = new Plane(Vector3.back, transform.position); //generate a plane on the player position aiming at the camera (z axis)
                Ray ray = Camera.main.ScreenPointToRay(aimInput);
                float hitDistance;
                if(aimingPlane.Raycast(ray, out hitDistance))
                {
                    Vector3 mouseWorldPosition = ray.GetPoint(hitDistance);
                    _aimDirection = ((Vector2)mouseWorldPosition - (Vector2)transform.position).normalized;

                    Debug.DrawLine(transform.position, transform.position + (Vector3)_aimDirection * 15f, Color.green);
                }
                
            }
        }
    }

    public void ChangeMagnetMode(MagnetismForceMode newMode)
    {
        _magnetismForceMode = newMode;
    }

    public void CalculateForcesToBeApplied()
    {
        Vector2 totalForceOnPlayer = Vector2.zero;

        for(int i = _nearbyObjects.Count -1; i >= 0; i--)
        {
            MagnetObject targetBody = _nearbyObjects[i];
            if(targetBody == null || targetBody.gameObject == gameObject)
            {
                _nearbyObjects.RemoveAt(i);
                continue;
            }
            float netForceMagnitude = 0f;
            Vector2 resultingDirection = Vector2.zero;

            Vector2 vectorPlayerToTarget = targetBody.transform.position - transform.position;
            float distance = vectorPlayerToTarget.magnitude;
            if (distance > maxEffectRange || distance <= 0.01f) continue;

            float aimFactor = GetAimFactor(vectorPlayerToTarget);
            if (aimFactor <= 0.01f) continue; //small threshold needs to be added

            float playerMagnetForce = CalculateForceMagnitude(baseMagenticForce, distance, aimFactor); // force generated by the player magnet
            float incomingForceMagnitude = CalculateForceMagnitude(targetBody.MaxMagneticForce, distance, aimFactor); // force generated by the target body to the players magnet

            Vector2 playerForceDirection = (_magnetismForceMode == MagnetismForceMode.ATTRACT)
                ? vectorPlayerToTarget.normalized
                : -vectorPlayerToTarget.normalized;
            Vector2 playerForceVector = playerForceDirection * playerMagnetForce;
            Debug.DrawLine(targetBody.transform.position, vectorPlayerToTarget * 5f, Color.red);

            bool cooperative = (_magnetismForceMode == targetBody.MagnetismMode); // returns true if both magnetism modes are equal
            if(cooperative)
            {
                resultingDirection = (targetBody.MagnetismMode == MagnetismForceMode.ATTRACT)
                    ? vectorPlayerToTarget.normalized
                    : -vectorPlayerToTarget.normalized;
                netForceMagnitude = incomingForceMagnitude + playerMagnetForce;
            } else // opposite forces
            {
                if(playerMagnetForce > incomingForceMagnitude)
                {
                    netForceMagnitude = playerMagnetForce - incomingForceMagnitude;
                    resultingDirection = playerForceDirection;
                } else
                {
                    netForceMagnitude = incomingForceMagnitude - playerMagnetForce;

                    resultingDirection = (targetBody.MagnetismMode == MagnetismForceMode.ATTRACT)
                   ? vectorPlayerToTarget.normalized
                   : -vectorPlayerToTarget.normalized;
                }
            }
            totalForceOnPlayer += resultingDirection * netForceMagnitude;
                switch (targetBody.ObjectType)
                {
                    case MagnetObjectType.STATIC_WITH_FORCE: 
                        if (incomingForceMagnitude > 0.01f) // small threshold needs to be added
                        {

                        }

                        break;

                    case MagnetObjectType.NON_STATIC_WITH_FORCE: 
                        if (incomingForceMagnitude > 0.01f)
                        {
                            targetBody.ApplyForceToObject(playerForceVector);
                        }

                        break;

                    case MagnetObjectType.NON_STATIC_WITHOUT_FORCE:
                            targetBody.ApplyForceToObject(playerForceVector);
                        break;
                }
        }
        Debug.Log(totalForceOnPlayer.magnitude);
        Debug.DrawLine(transform.position, totalForceOnPlayer * 5f, Color.cyan);

        _rb.AddForce(totalForceOnPlayer, ForceMode2D.Force);
        if(Mathf.Abs(totalForceOnPlayer.magnitude) > 0.5f)
        {
            _movementBehaviour.NotifyIsOnMagnetismMode(true);
        } else
        {
            _movementBehaviour.NotifyIsOnMagnetismMode(false);
        }
    }

    private float GetAimFactor(Vector2 vectorPlayerToTarget) //the closer the return value is to 1 the close it is aiming to the center of that object
    {
        float angleToTarget = Vector2.Angle(_aimDirection, vectorPlayerToTarget);
        if (angleToTarget > aimConeAngle) return 0;

        return 1f - (angleToTarget / aimConeAngle);
    }

    private float CalculateForceMagnitude(float baseStrenght, float distance, float aimFactor) // calculates final force using falloff and aim factor
    {
        float distanceFactor = distanceFalloff.Evaluate(distance);
        return baseStrenght * distanceFactor * aimFactor;
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        MagnetObject magnetObject = collision.GetComponent<MagnetObject>();
        if(magnetObject != null && !_nearbyObjects.Contains(magnetObject))
        {
            _nearbyObjects.Add(magnetObject);
            Debug.Log($"Object: {magnetObject.name} is now added to nearbyObjects");
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        MagnetObject magnetObject = collision.GetComponent<MagnetObject>();
        if(magnetObject != null)
        {
            _nearbyObjects.Remove(magnetObject);
            Debug.Log($"Object: {magnetObject.name} is now deleted from nearbyObjects");
        }
    }
}
